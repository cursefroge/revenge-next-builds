diff --git a/src/plugins/start/better-chat-buttons/index.tsx b/src/plugins/start/better-chat-buttons/index.tsx
new file mode 100644
index 0000000..722a389
--- /dev/null
+++ b/src/plugins/start/better-chat-buttons/index.tsx
@@ -0,0 +1,205 @@
+import { createFilterGenerator } from '@revenge-mod/modules/finders/filters'
+import { getModule } from '@revenge-mod/modules/finders/get'
+import { lookupModule } from '@revenge-mod/modules/finders/lookup'
+import { after, before } from '@revenge-mod/patcher'
+import { registerPlugin } from '@revenge-mod/plugins/_'
+import { PluginFlags } from '@revenge-mod/plugins/constants'
+import { findInReactFiber } from '@revenge-mod/utils/react'
+import { SettingsComponent } from './settings'
+import type {
+    Filter,
+    FilterGenerator,
+} from '@revenge-mod/modules/finders/filters'
+import type {
+    ForwardRefRenderFunction,
+    MemoExoticComponent,
+    NamedExoticComponent,
+    RefObject,
+} from 'react'
+
+export interface Settings {
+    hide: {
+        app: boolean
+        thread: boolean
+        gift: boolean
+        voice: boolean
+    }
+    collapse: {
+        actions: boolean
+        send: boolean
+    }
+}
+
+registerPlugin<{ storage: Settings }>(
+    {
+        id: 'palmdevs.better-chat-buttons',
+        name: 'Better Chat Buttons',
+        description:
+            'Hiding all annoying chat buttons, or making them never collapse, all configurable.',
+        author: 'PalmDevs',
+        icon: 'ChatCheckIcon',
+    },
+    {
+        storage: {
+            load: true,
+            default: {
+                collapse: {
+                    actions: false,
+                    send: false,
+                },
+                hide: {
+                    gift: true,
+                    app: true,
+                    thread: true,
+                    voice: true,
+                },
+            },
+        },
+        async start({ cleanup, storage }) {
+            cleanup(
+                getModule(
+                    byMemoizedNamedExoticComponent<
+                        SendButtonRef,
+                        {
+                            hasPendingAttachments: boolean
+                            canSendVoiceMessage: boolean
+                        }
+                    >('ChatInputSendButton'),
+                    ChatInputSendButton => {
+                        const [ChatInputActions] = lookupModule(
+                            byMemoizedNamedExoticComponent<
+                                ActionsRef,
+                                {
+                                    canStartThreads: boolean
+                                    isAppLauncherEnabled: boolean
+                                    shouldShowGiftButton: boolean
+                                }
+                            >('ChatInputActions'),
+                        )
+
+                        let patchedOnDismissActions: ActionsRef['onDismissActions']
+
+                        cleanup(
+                            after(ChatInputSendButton.type, 'render', tree => {
+                                const node = findInReactFiber(
+                                    tree as Extract<typeof tree, object>,
+                                    (
+                                        tree,
+                                    ): tree is {
+                                        props: {
+                                            items: Array<{
+                                                isOnCooldown: boolean
+                                                sendEnabled: boolean
+                                                sendVoiceMessageEnabled: boolean
+                                            }>
+                                        }
+                                    } => Array.isArray(tree.props?.items),
+                                )
+
+                                if (!node) return tree
+
+                                const {
+                                    props: {
+                                        items: [item],
+                                    },
+                                } = node
+
+                                if (item.sendVoiceMessageEnabled)
+                                    item.sendVoiceMessageEnabled =
+                                        !settings.hide.voice
+
+                                if (settings.collapse.send) {
+                                    const { isOnCooldown, sendEnabled } = item
+                                    if (isOnCooldown || !sendEnabled)
+                                        return null
+                                }
+
+                                return tree
+                            }),
+
+                            before(ChatInputActions!.type, 'render', args => {
+                                const [props] = args
+
+                                if (props.isAppLauncherEnabled)
+                                    props.isAppLauncherEnabled =
+                                        !settings.hide.app
+                                if (props.canStartThreads)
+                                    props.canStartThreads =
+                                        !settings.hide.thread
+                                props.shouldShowGiftButton = !settings.hide.gift
+
+                                return args
+                            }),
+                            before(ChatInputActions!.type, 'render', args => {
+                                const ref = args[1] as
+                                    | RefObject<ActionsRef | null>
+                                    | undefined // When using DevTools, the ref is undefined
+
+                                if (ref) {
+                                    // Ref is only available after the first render
+                                    requestAnimationFrame(() => {
+                                        const { current } = ref
+                                        if (!current) return
+
+                                        const { onDismissActions } = current
+
+                                        if (
+                                            onDismissActions ===
+                                            patchedOnDismissActions
+                                        )
+                                            return
+
+                                        patchedOnDismissActions =
+                                            current.onDismissActions = () =>
+                                                (settings.collapse.actions
+                                                    ? onDismissActions
+                                                    : current.onShowActions
+                                                ).call(current)
+
+                                        cleanup(() => {
+                                            current.onDismissActions =
+                                                onDismissActions
+                                        })
+                                    })
+                                }
+
+                                return args
+                            }),
+                        )
+                    },
+                ),
+            )
+
+            const settings = await storage.get()
+        },
+        SettingsComponent,
+    },
+    PluginFlags.Enabled,
+    0,
+)
+
+interface ForwardRefExoticComponent<T, P = object>
+    extends NamedExoticComponent<P> {
+    render: ForwardRefRenderFunction<T, P>
+}
+
+type ByMemoizedNamedExoticComponent = FilterGenerator<
+    <T, P = object>(
+        name: string,
+    ) => Filter<MemoExoticComponent<ForwardRefExoticComponent<T, P>>, true>
+>
+
+const byMemoizedNamedExoticComponent = createFilterGenerator(
+    ([name], _, exports) =>
+        exports.type?.render?.length === 2 && exports.type.displayName === name,
+    ([name]) => `byMemoizedNamedExoticComponent(${name})`,
+) as ByMemoizedNamedExoticComponent
+
+interface ActionsRef {
+    onDismissActions(): void
+    onShowActions(): void
+}
+
+interface SendButtonRef {
+    setHasText(hasText: boolean): void
+}
diff --git a/src/plugins/start/better-chat-buttons/settings.tsx b/src/plugins/start/better-chat-buttons/settings.tsx
new file mode 100644
index 0000000..8225062
--- /dev/null
+++ b/src/plugins/start/better-chat-buttons/settings.tsx
@@ -0,0 +1,131 @@
+import { getAssetIdByName } from '@revenge-mod/assets'
+import Page from '@revenge-mod/components/Page'
+import { Design } from '@revenge-mod/discord/design'
+import { ScrollView } from 'react-native'
+import type { PluginSettingsComponent } from '@revenge-mod/plugins/types'
+import type { ComponentProps } from 'react'
+import type { Settings } from '.'
+
+const {
+    Stack,
+    TableRadioGroup,
+    TableRadioRow,
+    TableRow,
+    TableRowGroup,
+    TableSwitchRow,
+    Text,
+} = Design
+
+type Props = ComponentProps<PluginSettingsComponent<{ storage: Settings }>>
+
+export function SettingsComponent({ api }: Props) {
+    return (
+        <Page>
+            <ScrollView>
+                <Stack spacing={24}>
+                    <Text
+                        color="text-danger"
+                        variant="text-md/semibold"
+                        style={{ textAlign: 'center' }}
+                    >
+                        ‚ùó Changes are only applied when you start typing again.
+                    </Text>
+                    <HideActionButtonsSetting api={api} />
+                    <ActionButtonsCollapseBehaviorSetting api={api} />
+                    <SendButtonCollapseBehaviorSetting api={api} />
+                </Stack>
+            </ScrollView>
+        </Page>
+    )
+}
+
+function HideActionButtonsSetting({ api }: Props) {
+    return (
+        <TableRowGroup title="Hide Action Buttons">
+            {(
+                [
+                    ['Apps & Commands', 'GameControllerIcon', 'app'],
+                    ['Gift', 'ic_gift', 'gift'],
+                    ['New Thread', 'ThreadPlusIcon', 'thread'],
+                    ['Voice Message', 'MicrophoneIcon', 'voice'],
+                ] as Array<
+                    [name: string, icon: string, key: keyof Settings['hide']]
+                >
+            ).map(([label, icon, key]) => {
+                const setting = api.storage.use(x => x.hide && key in x.hide)!
+
+                return (
+                    <TableSwitchRow
+                        key={key}
+                        icon={
+                            <TableRow.Icon source={getAssetIdByName(icon)!} />
+                        }
+                        label={`Hide ${label}`}
+                        value={setting.hide[key]}
+                        onValueChange={(v: boolean) => {
+                            api.storage.set({
+                                hide: {
+                                    [key]: v,
+                                },
+                            })
+                        }}
+                    />
+                )
+            })}
+        </TableRowGroup>
+    )
+}
+
+function ActionButtonsCollapseBehaviorSetting({ api }: Props) {
+    const {
+        collapse: { actions: setting },
+    } = api.storage.use(x => x.collapse && 'actions' in x.collapse)!
+
+    return (
+        <TableRadioGroup
+            title="Action Buttons Collapse Behavior"
+            defaultValue={setting}
+            onChange={v => {
+                api.storage.set({
+                    collapse: {
+                        actions: v,
+                    },
+                })
+            }}
+        >
+            <TableRadioRow label="Never collapse" value={false} />
+            <TableRadioRow
+                label="Collapse while typing"
+                subLabel="Collapse action buttons when you start typing."
+                value={true}
+            />
+        </TableRadioGroup>
+    )
+}
+
+function SendButtonCollapseBehaviorSetting({ api }: Props) {
+    const {
+        collapse: { send: setting },
+    } = api.storage.use(x => x.collapse && 'send' in x.collapse)!
+
+    return (
+        <TableRadioGroup
+            title="Send Button Collapse Behavior"
+            defaultValue={setting}
+            onChange={v => {
+                api.storage.set({
+                    collapse: {
+                        send: v,
+                    },
+                })
+            }}
+        >
+            <TableRadioRow label="Never collapse" value={false} />
+            <TableRadioRow
+                label="Collapse when no content"
+                subLabel="Collapse the Send button when you are not typing or attaching something."
+                value={true}
+            />
+        </TableRadioGroup>
+    )
+}
